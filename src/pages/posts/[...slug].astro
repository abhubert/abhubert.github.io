---
// src/pages/posts/[...slug].astro
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getCollection('posts');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

const post = Astro.props;
const { Content } = await post.render();
---

<Layout title={post.data.title}>
  <div class="page-container">
    <header class="post-header">
      <time datetime={post.data.pubDate.toISOString()}>
        {post.data.pubDate.toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        })}
      </time>
      <h1>{post.data.title}</h1>
      <p class="post-description">{post.data.description}</p>
      {post.data.tags && (
        <div class="post-tags">
          {post.data.tags.map(tag => (
            <span class="tag">{tag}</span>
          ))}
        </div>
      )}
    </header>

    <section class="content-section">
      <div class="content-flex">
        <article class="markdown-content post-content">
          <Content />
        </article>
      </div>
    </section>

    <footer class="post-footer">
      <a href="/posts" class="btn btn-text">‚Üê Back to posts</a>
    </footer>
  </div>
</Layout>

<style>
    .post-header {
        text-align: center;
        margin-bottom: var(--space-3xl);
        padding-bottom: var(--space-xl);
        border-bottom: 1px solid var(--color-border);
    }
    
    .post-header time {
        font-family: var(--font-mono);
        font-size: 0.9rem;
        color: var(--color-text-light);
        display: block;
        margin-bottom: var(--space-sm);
    }
    
    .post-header h1 {
        margin-bottom: var(--space-sm);
        font-size: 2.5rem;
    }
    
    .post-description {
        font-size: 1.1rem;
        color: var(--color-text-light);
        margin-bottom: var(--space-md);
    }
    
    .post-tags {
        display: flex;
        justify-content: center;
        gap: var(--space-sm);
        flex-wrap: wrap;
    }
    
    .post-content {
        margin-bottom: var(--space-3xl);
    }
    
    .post-footer {
        text-align: center;
        padding-top: var(--space-xl);
        border-top: 1px solid var(--color-border);
    }
    
    /* Markdown content styling */
    .post-content :global(h2) {
        margin-top: var(--space-2xl);
        margin-bottom: var(--space-md);
    }
    
    .post-content :global(h3) {
        margin-top: var(--space-xl);
        margin-bottom: var(--space-md);
    }
    
    .post-content :global(p) {
        margin-bottom: var(--space-md);
    }
    
    .post-content :global(ul, ol) {
        margin-bottom: var(--space-md);
        padding-left: var(--space-xl);
    }
    
    .post-content :global(li) {
        margin-bottom: var(--space-sm);
    }
    
    .post-content :global(blockquote) {
        margin: var(--space-xl) 0;
        padding: var(--space-lg);
        border-left: 4px solid var(--color-accent);
        background-color: var(--color-border-light);
        font-style: italic;
    }
    
    .post-content :global(code) {
        font-family: var(--font-mono);
        background-color: var(--color-tag);
        padding: var(--space-xs) var(--space-sm);
        border-radius: var(--border-radius);
        font-size: 0.9em;
    }
    
    .post-content :global(pre) {
        background-color: var(--color-tag);
        padding: var(--space-lg);
        border-radius: var(--border-radius);
        overflow-x: auto;
        margin: var(--space-lg) 0;
    }
    
    .post-content :global(pre code) {
        background: none;
        padding: 0;
    }
    
    .post-content :global(img) {
        max-width: 600px;
        width: 100%;
        height: auto;
        margin: var(--space-lg) 0;
        border-radius: var(--border-radius);
        display: block;
        margin: 2rem auto; /* centers the image and adds vertical space */
        box-shadow: var(--shadow-md, 0 4px 6px -1px rgb(0 0 0 / 0.1));
    }
    
    .post-content :global(svg) {
        max-width: 100%;
        height: auto;
        margin: var(--space-lg) 0;
    }
</style>